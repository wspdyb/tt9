ext.validateNoWhitespace = { String line, int lineNumber ->
    if (line == "") {
        return "There is no word on line ${lineNumber}. Remove all empty lines.\n"
    } else if (line.contains(" ")) {
        return "Found space on line ${lineNumber}. Make sure each word is on a new line. Phrases are not allowed.\n"
    }

    return ''
}

ext.validateFrequency = { int frequency, int maxFrequency, String dictionaryFileName, int lineNumber ->
    if (frequency < 0 || frequency > maxFrequency) {
        return "Dictionary '${dictionaryFileName}' is invalid. Found out-of-range word frequency: '${frequency}' on line ${lineNumber}. Frequency must be an integer between 0 and ${maxFrequency}.\n"
    }

    return ''
}

ext.validateWord = { String word, int lineNumber, String validCharacters, String errorMsgPrefix ->
    int errorCount = 0
    def errors = ''

    if (word.matches("(\\d.+?|.+?\\d|\\d)")) {
        errorCount++
        errors += "${errorMsgPrefix}. Found numbers on line ${lineNumber}. Remove all numbers.\n"
    }

    if (word.matches("^\\P{L}+\$")) {
        errorCount++
        errors += "${errorMsgPrefix}. Found a garbage word: '${word}' on line ${lineNumber}.\n"
    }

    if (word.matches("^(.|\\p{L}\\p{M}?)\$")) {
        errorCount++
        errors += "${errorMsgPrefix}. Found a single letter: '${word}' on line ${lineNumber}. Only uppercase single letters are allowed. The rest of the alphabet will be added automatically.\n"
    }

    if (errorCount == 0 && !word.matches(validCharacters)) {
        errorCount++
        errors += "${errorMsgPrefix}. Word '${word}' on line ${lineNumber} contains characters outside of the defined alphabet: $validCharacters.\n"
    }

    return [errorCount, errors]
}

ext.validateWordOrder = { String word, int previousWordLength, int sortingErrorCount, int maxSortingErrors, String dictionaryFileName, int lineNumber ->
    if (word.length() >= previousWordLength || sortingErrorCount > maxSortingErrors) {
        return ""
    } else if (sortingErrorCount == maxSortingErrors) {
        return "Too many sorting errors in '${dictionaryFileName}'. Disabling sorting check until the end of the file.\n"
    } else {
        return "Dictionary '${dictionaryFileName}' is not sorted. Word: '${word}' on line ${lineNumber} is shorter than the previous one. Ensure all words are sorted by length and sequence.\n"
    }
}
